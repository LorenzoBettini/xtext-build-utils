/**
 * generated by Xtext 2.20.0
 */
package io.github.lorenzobettini.tychoxbasetestlanguage.tests;

import static org.eclipse.xtext.xbase.lib.Exceptions.sneakyThrow;
import static org.junit.Assert.assertEquals;

import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.xbase.lib.util.ReflectExtensions;
import org.eclipse.xtext.xbase.testing.CompilationTestHelper;
import org.eclipse.xtext.xbase.testing.TemporaryFolder;
import org.junit.Rule;
import org.junit.Test;
import org.junit.runner.RunWith;

import com.google.inject.Inject;

/**
 * This is basically the same test as TychoxbasetestlanguageCompilerTest Xtend
 * test in the standard .tests project, but with Java Text Blocks instead of
 * Xtend multiline strings.
 * 
 * @author Lorenzo Bettini
 */
@RunWith(XtextRunner.class)
@InjectWith(TychoxbasetestlanguageInjectorProvider.class)
public class TychoxbasetestlanguageCompilerWithJavaTextBlocksTest {

	private static final boolean OS_WINDOWS = System.getProperty("os.name").startsWith("Windows");

	@Rule
	@Inject
	public TemporaryFolder temporaryFolder;

	@Inject
	private CompilationTestHelper compilationTestHelper;

	@Inject
	private ReflectExtensions reflectExtensions;

	@Test
	public void compileModel() throws Exception {
		compilationTestHelper.compile("""
			Hello Xtext {
				val String s = "hello"
				return s.toFirstUpper
			}
			""", 
			it -> {
				assertEquals("""
					package example;

					import org.eclipse.xtext.xbase.lib.StringExtensions;

					@SuppressWarnings("all")
					public class Xtext {
					  @Override
					  public String toString() {
					    final String s = "hello";
					    return StringExtensions.toFirstUpper(s);
					  }
					}
					""",
					removeCR(it.getSingleGeneratedCode()));
				try {
					final Object obj = it.getCompiledClass().getDeclaredConstructor().newInstance();
					assertEquals("Hello", reflectExtensions.invoke(obj, "toString"));
				} catch (Exception e) {
					throw sneakyThrow(e);
				}
			});
	}

	/**
	 * Makes sure that there are no OS dependent line endings,
	 * for example CR on Windows.
	 * 
	 * @param s
	 * @return
	 */
	private String removeCR(String s) {
		if (!OS_WINDOWS)
			return s;
		return s.replace("\r", "");
	}
}
